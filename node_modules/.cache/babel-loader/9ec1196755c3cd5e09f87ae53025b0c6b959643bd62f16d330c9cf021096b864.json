{"ast":null,"code":"var _jsxFileName = \"/Users/cephusinpursuit/Desktop/capstone-team2-frontend/prograde/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Auth } from \"./Components/Auth\";\nimport { db, auth, storage } from \"./config/firebase\";\nimport { getDocs, collection, addDoc, deleteDoc, updateDoc, doc } from \"firebase/firestore\";\nimport { ref, uploadBytes } from \"firebase/storage\";\nimport { Button, Form, InputGroup, Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [commentList, setCommentList] = useState([]);\n  const [newCommentContent, setNewCommentContent] = useState(\"\");\n  const [isNewCommentImportant, setIsNewCommentImportant] = useState(false);\n  const [updatedCommentContent, setUpdatedCommentContent] = useState(\"\");\n  const [fileUpload, setFileUpload] = useState(null);\n  const commentsCollectionRef = collection(db, \"comments\");\n  const fetchCommentList = async () => {\n    try {\n      const data = await getDocs(commentsCollectionRef);\n      const filteredData = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setCommentList(filteredData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    fetchCommentList();\n  }, []);\n  const onSubmitComment = async () => {\n    const user = auth.currentUser;\n    if (user) {\n      const userId = user.uid;\n      try {\n        if (newCommentContent.trim() === \"\") {\n          console.error(\"Comment content is empty.\");\n          return;\n        }\n        await addDoc(commentsCollectionRef, {\n          content: newCommentContent,\n          important: isNewCommentImportant,\n          userId: userId\n        });\n\n        // Optimized: Only add the new comment to the list instead of fetching all.\n        setCommentList(prevCommentList => [...prevCommentList, {\n          content: newCommentContent,\n          important: isNewCommentImportant,\n          userId: userId\n        }]);\n\n        // Clear the input fields\n        setNewCommentContent(\"\");\n        setIsNewCommentImportant(false);\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"User is not authenticated.\");\n    }\n  };\n  const deleteComment = async id => {\n    const commentDoc = doc(db, \"comments\", id);\n    await deleteDoc(commentDoc);\n\n    // Optimized: Remove the deleted comment from the list.\n    setCommentList(prevCommentList => prevCommentList.filter(comment => comment.id !== id));\n  };\n  const updateCommentContent = async id => {\n    const commentDoc = doc(db, \"comments\", id);\n    try {\n      await updateDoc(commentDoc, {\n        content: updatedCommentContent\n      });\n\n      // Optimized: Update the content in the comment list.\n      setCommentList(prevCommentList => prevCommentList.map(comment => comment.id === id ? {\n        ...comment,\n        content: updatedCommentContent\n      } : comment));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const uploadFile = async () => {\n    if (!fileUpload) return;\n    const filesFolderRef = ref(storage, `projectFiles/${fileUpload.name}`);\n    try {\n      await uploadBytes(filesFolderRef, fileUpload);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          placeholder: \"Comment content...\",\n          value: newCommentContent,\n          onChange: e => setNewCommentContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Checkbox, {\n          checked: isNewCommentImportant,\n          onChange: e => setIsNewCommentImportant(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n          children: \"Important\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onSubmitComment,\n        children: \"Submit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: commentList.map(comment => /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: comment.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: comment.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteComment(comment.id),\n            children: \"Delete Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"New content...\",\n              value: updatedCommentContent,\n              onChange: e => setUpdatedCommentContent(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => updateCommentContent(comment.id),\n              children: \"Update Comment Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"file\",\n        onChange: e => setFileUpload(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: uploadFile,\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tpoEMBKtOGQR+6Bs5Cgfbrd5frw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Auth","db","auth","storage","getDocs","collection","addDoc","deleteDoc","updateDoc","doc","ref","uploadBytes","Button","Form","InputGroup","Card","jsxDEV","_jsxDEV","App","_s","commentList","setCommentList","newCommentContent","setNewCommentContent","isNewCommentImportant","setIsNewCommentImportant","updatedCommentContent","setUpdatedCommentContent","fileUpload","setFileUpload","commentsCollectionRef","fetchCommentList","data","filteredData","docs","map","id","err","console","error","onSubmitComment","user","currentUser","userId","uid","trim","content","important","prevCommentList","deleteComment","commentDoc","filter","comment","updateCommentContent","uploadFile","filesFolderRef","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Control","placeholder","value","onChange","e","target","Checkbox","checked","Text","onClick","Body","Title","title","type","files","_c","$RefreshReg$"],"sources":["/Users/cephusinpursuit/Desktop/capstone-team2-frontend/prograde/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Auth } from \"./Components/Auth\";\nimport { db, auth, storage } from \"./config/firebase\";\nimport {\n  getDocs,\n  collection,\n  addDoc,\n  deleteDoc,\n  updateDoc,\n  doc,\n} from \"firebase/firestore\";\nimport { ref, uploadBytes } from \"firebase/storage\";\nimport { Button, Form, InputGroup, Card } from \"react-bootstrap\";\n\nfunction App() {\n  const [commentList, setCommentList] = useState([]);\n  const [newCommentContent, setNewCommentContent] = useState(\"\");\n  const [isNewCommentImportant, setIsNewCommentImportant] = useState(false);\n  const [updatedCommentContent, setUpdatedCommentContent] = useState(\"\");\n  const [fileUpload, setFileUpload] = useState(null);\n\n  const commentsCollectionRef = collection(db, \"comments\");\n\n  const fetchCommentList = async () => {\n    try {\n      const data = await getDocs(commentsCollectionRef);\n      const filteredData = data.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      setCommentList(filteredData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchCommentList();\n  }, []);\n\n  const onSubmitComment = async () => {\n    const user = auth.currentUser;\n\n    if (user) {\n      const userId = user.uid;\n\n      try {\n        if (newCommentContent.trim() === \"\") {\n          console.error(\"Comment content is empty.\");\n          return;\n        }\n\n        await addDoc(commentsCollectionRef, {\n          content: newCommentContent,\n          important: isNewCommentImportant,\n          userId: userId,\n        });\n\n        // Optimized: Only add the new comment to the list instead of fetching all.\n        setCommentList((prevCommentList) => [\n          ...prevCommentList,\n          {\n            content: newCommentContent,\n            important: isNewCommentImportant,\n            userId: userId,\n          },\n        ]);\n\n        // Clear the input fields\n        setNewCommentContent(\"\");\n        setIsNewCommentImportant(false);\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"User is not authenticated.\");\n    }\n  };\n\n  const deleteComment = async (id) => {\n    const commentDoc = doc(db, \"comments\", id);\n    await deleteDoc(commentDoc);\n\n    // Optimized: Remove the deleted comment from the list.\n    setCommentList((prevCommentList) =>\n      prevCommentList.filter((comment) => comment.id !== id)\n    );\n  };\n\n  const updateCommentContent = async (id) => {\n    const commentDoc = doc(db, \"comments\", id);\n\n    try {\n      await updateDoc(commentDoc, { content: updatedCommentContent });\n\n      // Optimized: Update the content in the comment list.\n      setCommentList((prevCommentList) =>\n        prevCommentList.map((comment) =>\n          comment.id === id\n            ? { ...comment, content: updatedCommentContent }\n            : comment\n        )\n      );\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const uploadFile = async () => {\n    if (!fileUpload) return;\n    const filesFolderRef = ref(storage, `projectFiles/${fileUpload.name}`);\n\n    try {\n      await uploadBytes(filesFolderRef, fileUpload);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Auth />\n\n      <div>\n        <InputGroup className=\"mb-3\">\n          <Form.Control\n            placeholder=\"Comment content...\"\n            value={newCommentContent}\n            onChange={(e) => setNewCommentContent(e.target.value)}\n          />\n          <InputGroup.Checkbox\n            checked={isNewCommentImportant}\n            onChange={(e) => setIsNewCommentImportant(e.target.checked)}\n          />\n          <InputGroup.Text>Important</InputGroup.Text>\n        </InputGroup>\n        <Button onClick={onSubmitComment}>Submit Comment</Button>\n      </div>\n      <div>\n        {commentList.map((comment) => (\n          <Card key={comment.id}>\n            <Card.Body>\n              <Card.Title>{comment.title}</Card.Title>\n              <Card.Text>{comment.content}</Card.Text>\n              <Button onClick={() => deleteComment(comment.id)}>\n                Delete Comment\n              </Button>\n              <InputGroup className=\"mb-3\">\n                <Form.Control\n                  placeholder=\"New content...\"\n                  value={updatedCommentContent}\n                  onChange={(e) => setUpdatedCommentContent(e.target.value)}\n                />\n                <Button onClick={() => updateCommentContent(comment.id)}>\n                  Update Comment Content\n                </Button>\n              </InputGroup>\n            </Card.Body>\n          </Card>\n        ))}\n      </div>\n      <div>\n        <Form.Control\n          type=\"file\"\n          onChange={(e) => setFileUpload(e.target.files[0])}\n        />\n        <Button onClick={uploadFile}>Upload File</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}